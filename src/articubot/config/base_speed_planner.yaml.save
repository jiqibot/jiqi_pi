TrajectoryPlannerROS: # determines the speeds sent to robot when navigating
 
  # Robot Config (Speed, Accel, etc  max_vel_x: 0.3 #0.45
  min_vel_x: 0.1 
  max_vel_theta: 0.4 #def 1.0
  min_vel_theta: -0.4 #def -1.0
=======
  max_vel_x: 0.1 #0.45
  min_vel_x: 0.01 
  max_vel_theta: 0.01 #def 1.0
  min_vel_theta: -0.01 #def -1.0
>>>>>>> 0ee3d51fccc6745d363851342652446cfaa78e1c
  min_in_place_vel_theta: 0.4
  escape_vel: -0.5

  acc_lim_theta: 0.4 #3.2
  acc_lim_x: 0.1 #2.5
  acc_lim_y: 0.7 #2.5

  holonomic_robot: false # the final robot might be true

  # Forward Simulation (Predictive Speed and Trajectory)
  # Increasing sim_time and vx samples will probably increase the processing power needed
  sim_time: 2.5 # def: 1.0 - The amount of time (s) it simulates into future
  vx_samples: 5 # def: 3 - The number of speed samples it tries in the simulation of the future

  # Goal Tolerance
  xy_goal_tolerance: 0.3 # def: 0.1
  yaw_goal_tolerance: 0.15 # def ; 0.05

  # Trajecctory Scoring Params (Cost)
  # cost = pdist_scale + gdist_scale + occdist_scale

  dwa: false # def: true
  meter_scoring: true # def: false - determine wether trajectory cost is based in meters
  occdist_scale: 0.01 # def: 0.01 - How much the robot should avoid obstacles
  pdist_scale: 2.5 # def: 0.6 max: 5.0 - How close the local planner should be the global planner
  gdist_scale: 0.8 # def: 0.8 max: 5.0 - How much the robot should attempt to reach it local goal. Also, controls speed.

  # Oscillation Prevention
  # Doesn't seem very good
  oscillation_reset_dist: 0.05 #def: 0.05 - How far the robot must travel in meters before oscillation flags are reset
<<<<<<< HEAD
  min_vel_x: -0.3
  max_vel_theta: 1.0
  min_in_place_vel_theta: -0.4

  acc_lim_theta: 3.0 #3.2
  acc_lim_x: 0.7 #2.5
  acc_lim_y: 0.7 #2.5

  occdist_scale: 0.01

  holonomic_robot: true # the final robot might be true
=======
>>>>>>> 0ee3d51fccc6745d363851342652446cfaa78e1c
